#!/bin/bash

#set -e

#########################################################
#
# Platform: NCI Gadi HPC
#
# Author: Tracy Chew
# tracy.chew@sydney.edu.au
#
# If you use this script towards a publication, please acknowledge the
# Sydney Informatics Hub (or co-authorship, where appropriate).
#
# Suggested acknowledgement:
# The authors acknowledge the scientific and technical assistance
# <or e.g. bioinformatics assistance of <PERSON>> of Sydney Informatics
# Hub and resources and services from the National Computational
# Infrastructure (NCI), which is supported by the Australian Government
# with access facilitated by the University of Sydney.
#
#########################################################

# DESCRIPTION
# Using sample ID, find all STAR BAMs available and create final BAMs
# For multiplexed samples:
# Merge flowcell level bams to sample level bams
# Retain flowcell level bams (to check technical batch effects)
# For non-multiplexed samples:
# Create symlink and rename STAR bams to <sample>.final.bam
# All bams are coordinate sorted and indexed

# COMPUTE
# Majority of samples are probably not multiplexed. These only need 1 CPU
# samtools does improve with multiple threads for multiplexed samples. 
# Future: Run samples separately, although not too bad now
# ~882 samples including ~10 multiplexed, use
# #PBS -l walltime=05:00:00,ncpus=48,mem=190GB,wd

#PBS -P er01
#PBS -N samtools_merge_index
#PBS -l walltime=1:00:00,ncpus=12,mem=80GB,wd
#PBS -q normal
#PBS -W umask=022
#PBS -l storage=scratch/er01
#PBS -o ./Logs/samtools_merge_index.o
#PBS -e ./Logs/samtools_merge_index.e

module load openmpi/4.0.2
module load nci-parallel/1.0.0a
module load samtools/1.10

mkdir -p ./Logs

# NCPUS per task
NCPUS=3
SCRIPT=./samtools_merge_index.sh
INPUTS=./Inputs/samtools_merge_index.inputs

#########################################################
# Do not edit below this line
#########################################################

M=$(( PBS_NCI_NCPUS_PER_NODE / NCPUS )) 

sed "s|^|${SCRIPT} |" ${INPUTS} > ${PBS_JOBFS}/input-file

mpirun --np $((M * PBS_NCPUS / PBS_NCI_NCPUS_PER_NODE)) \
        --map-by node:PE=${NCPUS} \
        nci-parallel \
        --verbose \
        --input-file ${PBS_JOBFS}/input-file
